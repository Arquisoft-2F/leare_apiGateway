    # // CATEGORIES

    # @QueryMapping
    # public Category[] categories() {
    #     return webClient
    #         .get()
    #         .uri("/categories")
    #         .retrieve()
    #         .bodyToMono(Category[].class)
    #         .block();
    # }

    # @QueryMapping
    # public Category categoryById(@Argument String id) {
    #     return webClient
    #         .get()
    #         .uri("/categories/{id}", id)
    #         .retrieve()
    #         .bodyToMono(Category.class)
    #         .block();
    # }

    # @MutationMapping
    # public Category createCategory(@Argument String category_name) {
    #     Map<String, Object> body = new HashMap<>();
    #     body.put("category_name", category_name);

    #     return webClient
    #         .post()
    #         .uri("/categories")
    #         .bodyValue(body)
    #         .retrieve()
    #         .bodyToMono(Category.class)
    #         .block();
    # }

    # @MutationMapping
    # public Category editCategory(@Argument EditCategoryInput input) {
    #     Map<String, Object> body = new HashMap<>();
    #     body.put("category_name", input.getCategory_name());

    #     return webClient
    #         .patch()
    #         .uri("/categories/{id}", input.getCategory_id())
    #         .bodyValue(body)
    #         .retrieve()
    #         .bodyToMono(Category.class)
    #         .block();
    # }

    # @MutationMapping
    # public Boolean deleteCategory(@Argument String id) {
    #     webClient
    #         .delete()
    #         .uri("/categories/{id}", id)
    #         .retrieve()
    #         .bodyToMono(Void.class)
    #         .block();
    #     return true;
    # }

    # // COURSES

    # @QueryMapping
    # public Course[] coursesByCategory(@Argument String[] categories) {
    #     return webClient
    #         .get()
    #         .uri("/courses/categories?categories={categories}", (Object[]) categories)
    #         .retrieve()
    #         .bodyToMono(Course[].class)
    #         .block();        
    #     }

    # @QueryMapping
    # public Course[] listCourses(@Argument int page) {
    #     return webClient
    #         .get()
    #         .uri("/listcourses/{page}", page)
    #         .retrieve()
    #         .bodyToMono(Course[].class)
    #         .block();
    # }

    # @QueryMapping
    # public Course courseById(@Argument String id) {
    #     return webClient
    #         .get()
    #         .uri("/courses/{id}", id)
    #         .retrieve()
    #         .bodyToMono(Course.class)
    #         .block();  
    # }

    # @MutationMapping
    # public Course createCourse(@Argument CreateCourseInput input) {
    #     return webClient
    #         .post()
    #         .uri("/courses")
    #         .bodyValue(input)
    #         .retrieve()
    #         .bodyToMono(Course.class)
    #         .block();  
    # }

    # @MutationMapping
    # public Course editCourse(@Argument EditCourseInput input) {
    #     return webClient
    #         .patch()
    #         .uri("/courses/{id}", input.getCourse_id())
    #         .bodyValue(input)
    #         .retrieve()
    #         .bodyToMono(Course.class)
    #         .block();  
    # }

    # @MutationMapping
    # public Boolean deleteCourse(@Argument String id) {
    #     webClient
    #         .delete()
    #         .uri("/courses/{id}", id)
    #         .retrieve()
    #         .bodyToMono(Void.class)
    #         .block(); 
            
    #     return true;
    # }

extend type Mutation {
    createCategory(category_name: String!): Category
    editCategory(input: EditCategoryInput!): Category
    deleteCategory(id: ID!): Boolean

    createCourse(input: CreateCourseInput!): Course
    editCourse(input: EditCourseInput!): Course
    deleteCourse(id: ID!): Boolean
}